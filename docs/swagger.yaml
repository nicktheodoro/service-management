basePath: /
definitions:
  controllers.CustomerAddressInput:
    properties:
      city:
        type: string
      complement:
        type: string
      district:
        type: string
      number:
        type: string
      state:
        type: string
      street:
        type: string
      zip_code:
        type: string
    required:
    - city
    - district
    - number
    - state
    - street
    - zip_code
    type: object
  controllers.CustomerInput:
    properties:
      address:
        $ref: '#/definitions/customers.CustomerAddress'
      document:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    required:
    - document
    - email
    - name
    - phone
    type: object
  controllers.LoginInput:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  controllers.ServiceInput:
    properties:
      description:
        type: string
      note:
        type: string
      status:
        type: integer
      value:
        type: integer
    required:
    - description
    - value
    type: object
  controllers.UserInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      last_name:
        type: string
      password:
        type: string
      role_id:
        type: integer
    required:
    - email
    - first_name
    - last_name
    - password
    - role_id
    type: object
  controllers.UserRoleInput:
    properties:
      role_name:
        type: string
    required:
    - role_name
    type: object
  customers.Customer:
    properties:
      created_at:
        type: string
      document:
        type: string
      email:
        type: string
      id:
        type: integer
      name:
        type: string
      phone:
        type: string
      updated_at:
        type: string
    type: object
  customers.CustomerAddress:
    properties:
      city:
        type: string
      complement:
        type: string
      created_at:
        type: string
      district:
        type: string
      id:
        type: integer
      number:
        type: string
      state:
        type: string
      street:
        type: string
      updated_at:
        type: string
      zip_code:
        type: string
    type: object
  services.Service:
    properties:
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      note:
        type: string
      status:
        type: integer
      updated_at:
        type: string
      value:
        type: integer
    type: object
  users.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      firstname:
        type: string
      id:
        type: integer
      lastname:
        type: string
      role:
        $ref: '#/definitions/users.UserRole'
      updated_at:
        type: string
    type: object
  users.UserRole:
    properties:
      created_at:
        type: string
      id:
        type: integer
      role_name:
        type: string
      updated_at:
        type: string
    type: object
info:
  contact: {}
  description: API REST in Golang with Gin Framework
  version: "1.0"
paths:
  /customers:
    get:
      description: get all customers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customers.Customer'
            type: array
      security:
      - Authorization Token: []
      tags:
      - customers
    post:
      consumes:
      - application/json
      description: create a new Customer
      parameters:
      - description: Customer Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CustomerInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/customers.Customer'
      security:
      - Authorization Token: []
      tags:
      - customers
  /customers/{id}:
    delete:
      description: delete an existing Customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Authorization Token: []
      tags:
      - customers
    get:
      description: get Customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customers.Customer'
      security:
      - Authorization Token: []
      tags:
      - customers
    put:
      consumes:
      - application/json
      description: update an existing customer by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CustomerInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customers.Customer'
      security:
      - Authorization Token: []
      tags:
      - customers
  /customers/{id}/addresses:
    get:
      description: get all customer addresses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/customers.CustomerAddress'
            type: array
      security:
      - Authorization Token: []
      tags:
      - customers_addresses
    post:
      consumes:
      - application/json
      description: create a new customer address
      parameters:
      - description: Customer Address Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CustomerAddressInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/customers.CustomerAddress'
      security:
      - Authorization Token: []
      tags:
      - customers_addresses
  /customers/{id}/addresses/{addressId}:
    delete:
      description: delete an existing customer address by ID
      parameters:
      - description: Customer Address ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Authorization Token: []
      tags:
      - customers_addresses
    get:
      description: get Customer Address by ID
      parameters:
      - description: Customer Address ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customers.CustomerAddress'
      security:
      - Authorization Token: []
      tags:
      - customers_addresses
    put:
      consumes:
      - application/json
      description: update an existing customer address by ID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: integer
      - description: Customer Address Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.CustomerAddressInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/customers.CustomerAddress'
      security:
      - Authorization Token: []
      tags:
      - customers_addresses
  /login:
    post:
      consumes:
      - application/json
      description: authenticate user and generate access token
      parameters:
      - description: Login Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.LoginInput'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
      tags:
      - auth
  /services:
    get:
      description: get all services
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/services.Service'
            type: array
      security:
      - Authorization Token: []
      tags:
      - services
    post:
      consumes:
      - application/json
      description: create a new service
      parameters:
      - description: Service Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.ServiceInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/services.Service'
      security:
      - Authorization Token: []
      tags:
      - services
  /services/{id}:
    delete:
      description: delete an existing service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Authorization Token: []
      tags:
      - services
    get:
      description: get Service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Service'
      security:
      - Authorization Token: []
      tags:
      - services
    put:
      consumes:
      - application/json
      description: update an existing service by ID
      parameters:
      - description: Service ID
        in: path
        name: id
        required: true
        type: integer
      - description: ServiceInput
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.ServiceInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/services.Service'
      security:
      - Authorization Token: []
      tags:
      - services
  /user-roles:
    get:
      description: get all user roles
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.UserRole'
            type: array
      security:
      - Authorization Token: []
      tags:
      - user_roles
    post:
      consumes:
      - application/json
      description: create a new user role
      parameters:
      - description: User Role Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRoleInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.UserRole'
      security:
      - Authorization Token: []
      tags:
      - user_roles
  /user-roles/{id}:
    delete:
      description: delete an existing user role by ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Authorization Token: []
      tags:
      - user_roles
    get:
      description: get user role by ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UserRole'
      security:
      - Authorization Token: []
      tags:
      - user_roles
    put:
      consumes:
      - application/json
      description: update an existing user role by ID
      parameters:
      - description: User Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Role Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UserRoleInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.UserRole'
      security:
      - Authorization Token: []
      tags:
      - user_roles
  /users:
    get:
      description: get all users
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/users.User'
            type: array
      security:
      - Authorization Token: []
      tags:
      - users
    post:
      consumes:
      - application/json
      description: create a new user
      parameters:
      - description: User Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/users.User'
      security:
      - Authorization Token: []
      tags:
      - users
  /users/{id}:
    delete:
      description: delete an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "204":
          description: No Content
      security:
      - Authorization Token: []
      tags:
      - users
    get:
      description: get User by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      security:
      - Authorization Token: []
      tags:
      - users
    put:
      consumes:
      - application/json
      description: update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User Input
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/controllers.UserInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/users.User'
      security:
      - Authorization Token: []
      tags:
      - users
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
